Rename
======

.. image:: ../img/rename.png
   :width: 800
   :align: center

Даний модуль . А саме розглянемо частину коду:

Бачимо деякі декілька не зв'язаних операції.
Які можуть відбуватися паралельно що пришвидшує виконання програми.
Але через використання одних і тих же регістрів це унеможилює.
Дану проблему можна обійти такими методами:

- програмне вирішення;
- фізичне .

Дану не зручність можна вирішити на етапі компіляції.
Але за допомогою даного методу не можна розширими адресу.
І в стандарті на регістровий файл виділяється 32 комірки.
Отже по 5 біт на кожну адресу регістра.
У випадку високопродуктивних цього не вистачає.

Фізичне вирішення
Це дозволяє розширити регістровий файл на будь який розмір.

Це дає можливість розширити кількість паралельних операцій.
Це розв'язує залежність один від одного.
Що в подальшому розшируює можливості.

Що даний модуль відпрацьовує.

1. Відбувається заміна результуючих регістрів. Запис в таблицю перейменувань.
2. Читання вже перейменованих регістрів.
3. Перевірка на нульовий регістр
4. Залежності регістрів в пакеті інтрукцій.

В RISC-V архітектурі регістр за нульовою адресує завжди містить нуль.
Необхідність в перейменовуванні його нема.

В пакеті інструкцій є чотири інструкції.
Потрібно перевірити на збіг зчитаних з табриці а також з попередніми в
пакеті.
Так як регістри кожної наступна інструкція можуть залежити від
попередніх результівних.
Так як вони запишутьця лише наступного такту.
Бо наступного такту буде відбуватися перейменовування
наступного пакету інструкцій.


